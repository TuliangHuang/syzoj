<% this.title = '提交记录 #' + info.submissionId %>
<% include util %>
<% include header %>
<script src="<%- lib('textfit/2.3.1/textFit.min.js') %>"></script>
<style>
.single-subtask {
    box-shadow: none !important;
}

.single-subtask > .title {
    display: none;
}

.single-subtask > .content {
    padding: 0 !important;
}

.accordion > .content > .accordion {
    margin-top: 0;
    margin-bottom: 0;
}

.accordion > .content > .accordion > .content {
    margin-top: 0;
    margin-bottom: 14px;
}

.accordion > .content > .accordion > .content > :last-child {
    margin-bottom: -10px !important;
}

/* Code line numbers */
pre > code.code-with-lines {
    counter-reset: line;
}
pre > code.code-with-lines .line {
    display: block;
    white-space: pre;
}
pre > code.code-with-lines .line-number {
    display: inline-block;
    width: 3.25em;
    padding-right: 0.75em;
    margin-right: 0.75em;
    text-align: right;
    color: rgba(0, 0, 0, 0.4);
    user-select: none;
    -webkit-user-select: none;
}
pre > code.code-with-lines .line-content {
    white-space: pre;
}

/* Grid layout for line numbers + code */
.codebox-grid {
    display: grid;
    grid-template-columns: 4.5em 1fr;
    align-items: stretch;
}
.codebox-grid .line-numbers {
    text-align: right;
    margin-right: 0;
    color: rgba(0, 0, 0, 0.4);
    user-select: none;
    -webkit-user-select: none;
    overflow: hidden;
    position: relative;
    font-family: "Fira Mono", "Monaco", "Menlo", "Ubuntu Mono", "Consolas", "source-code-pro", monospace;
}
.codebox-grid .line-numbers .line-number {
    display: block;
    position: relative;
    z-index: 1;
    cursor: pointer;
    width: 3.25em;
    margin-right: 1.25em;
}
.codebox-grid .line-numbers .line-number:hover { background: rgba(0, 0, 0, 0.06); }
.codebox-grid .line-numbers .line-number.selected { background: transparent; }
.codebox-grid .line-numbers .ln-highlights { position: absolute; top: 0; left: 0; right: 0; pointer-events: none; z-index: 0; }
.codebox-grid .line-numbers .ln-highlights .hl-line { position: absolute; left: 0; right: 0; background: #fff8c5; }
.codebox-grid .line-numbers .ln-highlights .hl-stripe { position: absolute; left: 0; width: 4px; background: #d29922; }
.codebox-grid pre {
    margin-top: 0;
    margin-bottom: 0;
    overflow: auto;
    position: relative;
    padding: 0;
}
.codebox-grid pre .code-highlights { position: absolute; top: 0; left: 0; right: 0; pointer-events: none; z-index: 0; }
.codebox-grid pre .code-highlights .hl-line { position: absolute; left: 0; right: 0; background: #fff8c5; }
.codebox-grid pre > code.code-with-lines { position: relative; z-index: 1; display: block; padding: 0; }

/* Scope: tighten segment horizontally for this page */
#submission_content .ui.segment { padding-left: 0 !important; padding-right: 0 !important; }
</style>
<span id="submission_content">
<div class="padding" id="vueAppFuckSafari">
  <table class="ui very basic center aligned table" id="status_table">
    <thead>
      <tr>
        <th>编号</th>
        <th>题目</th>
        <th>状态</th>
        <th v-if="displayConfig.showScore">分数</th>
        <th v-if="displayConfig.showUsage">总时间</th>
        <th v-if="displayConfig.showUsage">内存</th>
        <th v-if="displayConfig.showCode">代码 / 答案文件</th>
        <th>提交者</th>
        <th>提交时间</th>
        <th v-if="displayConfig.showOptions">辅助功能</th>
        <th v-if="showRejudge">重新评测</th>
      </tr>
    </thead>
    <tbody>
      <tr is="submission-item" v-bind:data="roughData" :config="displayConfig" :show-rejudge="showRejudge" :progress="getProgress()" :compiling="detailResult && !detailResult.compile"></tr>
    </tbody>
  </table>

  <code-box no-escape :key="codeKey" v-bind:content="code">
    <template v-if="formattedCode !== null">
      <a @click="toggleFormattedCode" class="codebox mini ui button">
        <template v-if="currentFormatted">
          Raw
        </template>
        <template v-else>
          Format
        </template>
      </a>
    </template>
  </code-box>
  <code-box v-if="detailResult && detailResult.compile" no-escape title="编译信息" v-bind:content="detailResult.compile.message"></code-box>
  <code-box v-if="detailResult" no-escape title="系统信息" v-bind:content="detailResult.systemMessage"></code-box>

  <div class="ui styled fluid accordion" :class="singleSubtask ? 'single-subtask' : '' " v-if="detailResult && detailResult.judge && detailResult.judge.subtasks">
    <template v-for="subtask, $index in detailResult.judge.subtasks">
      <div class="title" :class="singleSubtask ? 'active' : ''">
        <div class="ui grid">
          <div class="three wide column">
            <i class="dropdown icon"></i>
            子任务 #{{ $index + 1 }}
          </div>
          <div class="four wide column">
            <status-label :status="getSubtaskResult(subtask)" :indetail="true" :progress="getProgress($index)"></status-label>
          </div>
          <div class="three wide column" v-if="subtask.score != null">
            得分：<span style="font-weight: normal; ">{{ Math.trunc(subtask.score) }}</span>
          </div>
        </div>
      </div>
      <div class="content" :class="singleSubtask ? 'active' : ''">
        <div class="accordion">
          <template v-for="curCase, $caseIndex in subtask.cases">
            <div class="title" :class="checkTestcaseOK(curCase) || curCase.errorMessage ? '' : 'unexpandable'">
              <div class="ui grid">
                <div class="three wide column">
                    <i class="dropdown icon"></i>
                    测试点 #{{ $caseIndex + 1 }}
                </div>
                <div class="four wide column">
                  <status-label :status="getTestcaseStatus(curCase)" :indetail="true"></status-label>
                </div>
                <template v-if="checkTestcaseOK(curCase)">
                  <div class="three wide column">
                      得分：<span style="font-weight: normal; ">{{ Math.trunc(curCase.result.scoringRate * 100) }}</span>
                  </div>
                  <div class="three wide column" v-if="curCase.result.time != null && curCase.result.time !== NaN">
                      用时：<span style="font-weight: normal; ">{{ curCase.result.time }} ms</span>
                  </div>
                  <div class="three wide column" v-if="curCase.result.memory != null && curCase.result.memory !== NaN">
                      内存：<span style="font-weight: normal; ">{{ curCase.result.memory }} KiB</span>
                  </div>
                </template>
              </div>
            </div>
              <div class="content">
                <template v-if="checkTestcaseOK(curCase)">
                  <code-box v-if="curCase.result.input" :title="'输入文件（<span style=\'font-family: monospace; \'>'+ curCase.result.input.name +'</span>）'" :content="curCase.result.input.content" :download="<%= serializejs(syzoj.utils.makeUrl(['problem', info.problemId, 'testdata', 'download'])) %> + '/' + curCase.result.input.name"></code-box>
                  <code-box v-if="curCase.result.output" :title="'答案文件（<span style=\'font-family: monospace; \'>'+ curCase.result.output.name +'</span>）'" :content="curCase.result.output.content" :download="<%= serializejs(syzoj.utils.makeUrl(['problem', info.problemId, 'testdata', 'download'])) %> + '/' + curCase.result.output.name"></code-box>
                  <code-box title="用户输出" :content="curCase.result.userOutput"></code-box>
                  <code-box title="标准错误流" :content="curCase.result.userError"></code-box>
                  <code-box title="Special Judge 信息" :content="curCase.result.spjMessage"></code-box>
                  <code-box title="系统信息" :content="curCase.result.systemMessage"></code-box>
                </template>
                <code-box title="错误信息" :content="curCase.errorMessage"></code-box>
              </div>
          </template>
        </div>
      </div>
    </template>
  </div>
</div>
<script src="<%- lib('vue/2.5.21/vue.min.js') %>"></script>
<script src="<%- lib('socket.io/2.2.0/socket.io.js') %>"></script>
<script src="<%- lib('jsondiffpatch/0.2.5/jsondiffpatch.min.js') %>"></script>

<% include submissions_item %>

<script type="text/x-template" id="codeBoxTemplate">
    <div style="margin-top: 0px; margin-bottom: 14px; " v-if="content != null && content !== ''">
        <p v-if="title" class="transition visible">
           <strong v-html="title"></strong>
           <a v-if="download" style="color: #000; " :href="download"><i class="download icon"></i></a>
        </p>
        <div class="ui existing segment">
          <slot></slot>
          <div class="codebox-grid">
            <div class="line-numbers"><div class="ln-highlights"></div></div>
            <pre v-if="!noEscape" style="margin-top: 0; margin-bottom: 0; "><div class="code-highlights"></div><code class="code-with-lines">{{ content }}</code></pre>
            <pre v-if="noEscape" style="margin-top: 0; margin-bottom: 0; "><div class="code-highlights"></div><code class="code-with-lines" v-html="content"></code></pre>
          </div>
        </div>
    </div>
</script>

<script>
Vue.component("code-box", {
    template: "#codeBoxTemplate",
    props: {
        title: String,
        content: String,
        noEscape: {
            type: Boolean,
            default: false
        },
        download: String
    }
});
const socketUrl = "/detail";
const displayConfig = <%- serializejs(displayConfig) %>;
const token = <%- serializejs(socketToken) %>;

const TestcaseResultType = {};
(function (TestcaseResultType) {
    TestcaseResultType[TestcaseResultType["Accepted"] = 1] = "Accepted";
    TestcaseResultType[TestcaseResultType["WrongAnswer"] = 2] = "WrongAnswer";
    TestcaseResultType[TestcaseResultType["PartiallyCorrect"] = 3] = "PartiallyCorrect";
    TestcaseResultType[TestcaseResultType["MemoryLimitExceeded"] = 4] = "MemoryLimitExceeded";
    TestcaseResultType[TestcaseResultType["TimeLimitExceeded"] = 5] = "TimeLimitExceeded";
    TestcaseResultType[TestcaseResultType["OutputLimitExceeded"] = 6] = "OutputLimitExceeded";
    TestcaseResultType[TestcaseResultType["FileError"] = 7] = "FileError";
    TestcaseResultType[TestcaseResultType["RuntimeError"] = 8] = "RuntimeError";
    TestcaseResultType[TestcaseResultType["JudgementFailed"] = 9] = "JudgementFailed";
    TestcaseResultType[TestcaseResultType["InvalidInteraction"] = 10] = "InvalidInteraction";
})(TestcaseResultType);

const statusToString = {};
statusToString[TestcaseResultType.Accepted] = "Accepted";
statusToString[TestcaseResultType.WrongAnswer] = "Wrong Answer";
statusToString[TestcaseResultType.PartiallyCorrect] = "Partially Correct";
statusToString[TestcaseResultType.MemoryLimitExceeded] = "Memory Limit Exceeded";
statusToString[TestcaseResultType.TimeLimitExceeded] = "Time Limit Exceeded";
statusToString[TestcaseResultType.OutputLimitExceeded] = "Output Limit Exceeded";
statusToString[TestcaseResultType.RuntimeError] = "Runtime Error";
statusToString[TestcaseResultType.FileError] = "File Error";
statusToString[TestcaseResultType.JudgementFailed] = "Judgement Failed";
statusToString[TestcaseResultType.InvalidInteraction] = "Invalid Interaction";

const TaskStatus = {};
(function (TaskStatus) {
    TaskStatus[TaskStatus["Waiting"] = 0] = "Waiting";
    TaskStatus[TaskStatus["Running"] = 1] = "Running";
    TaskStatus[TaskStatus["Done"] = 2] = "Done";
    TaskStatus[TaskStatus["Failed"] = 3] = "Failed";
    TaskStatus[TaskStatus["Skipped"] = 4] = "Skipped";
})(TaskStatus);

const unformattedCode = <%- serializejs(code) %>;
const formattedCode = <%- serializejs(formattedCode) %>;

// Add line numbers to code blocks in-place without breaking HTML highlighting
function applyLineNumbers() {
  var containers = document.querySelectorAll('#vueAppFuckSafari .codebox-grid');
  containers.forEach(function (grid) {
    var codeEl = grid.querySelector('code.code-with-lines');
    var lnEl = grid.querySelector('.line-numbers');
    var hlEl = grid.querySelector('.code-highlights');
    var lnHlEl = grid.querySelector('.ln-highlights');
    if (!codeEl || !lnEl) return;
    if (lnEl.getAttribute('data-ln-applied') === '1' && lnEl.getAttribute('data-ln-for') === (codeEl.textContent || codeEl.innerHTML)) return;

    var text = codeEl.textContent || '';
    var lines = text.split(/\r\n|\r|\n/);
    if (lines.length <= 1) {
      lnEl.innerHTML = '';
      lnEl.setAttribute('data-ln-applied', '1');
      lnEl.setAttribute('data-ln-for', codeEl.innerHTML);
      return;
    }
    var nums = [];
    for (var i = 1; i <= lines.length; i++) nums.push('<span class=\"line-number\" title=\"L' + i + '\">' + i + '</span>');
    lnEl.innerHTML = '<div class="ln-highlights"></div>' + nums.join('');
    // re-grab highlight container in case rebuilt
    lnHlEl = grid.querySelector('.ln-highlights');
    lnEl.setAttribute('data-ln-applied', '1');
    lnEl.setAttribute('data-ln-for', codeEl.innerHTML);

    // Sync scroll between code and line numbers
    var pre = grid.querySelector('pre');
    if (pre) {
      pre.addEventListener('scroll', function () {
        lnEl.scrollTop = pre.scrollTop;
        if (hlEl) hlEl.style.transform = 'translateY(' + (-pre.scrollTop) + 'px)';
        if (lnHlEl) lnHlEl.style.transform = 'translateY(' + (-pre.scrollTop) + 'px)';
      });
    }

    // selection and hash
    var startIndex = null;
    function updateSelection(from, to) {
      if (from == null || to == null) return;
      var a = Math.min(from, to), b = Math.max(from, to);
      var lineEls = lnEl.querySelectorAll(':scope > .line-number');
      for (var i = 0; i < lineEls.length; i++) {
        var n = i + 1;
        if (n >= a && n <= b) lineEls[i].classList.add('selected');
        else lineEls[i].classList.remove('selected');
      }
      var unit = lineEls[0] ? lineEls[0].getBoundingClientRect().height : 18;
      var top = (a - 1) * unit;
      var height = (b - a + 1) * unit;
      if (hlEl) hlEl.innerHTML = '<div class="hl-line" style="top:' + top + 'px;height:' + height + 'px;"></div>';
      if (lnHlEl) lnHlEl.innerHTML = '<div class="hl-line" style="top:' + top + 'px;height:' + height + 'px;"></div>' + '<div class="hl-stripe" style="top:' + top + 'px;height:' + height + 'px;"></div>';
      var newHash = a === b ? ('#L' + a) : ('#L' + a + '-L' + b);
      try { history.replaceState(null, '', newHash); } catch (e) { location.hash = newHash; }
    }
    function clearSelection() {
      lnEl.querySelectorAll(':scope > .line-number').forEach(function (el) { el.classList.remove('selected'); });
      if (hlEl) hlEl.innerHTML = '';
      if (lnHlEl) lnHlEl.innerHTML = '';
    }
    lnEl.querySelectorAll(':scope > .line-number').forEach(function (el, idx) {
      el.addEventListener('click', function (ev) {
        var line = idx + 1;
        if (ev.shiftKey && startIndex != null) updateSelection(startIndex, line);
        else { clearSelection(); startIndex = line; updateSelection(line, line); }
      });
    });

    function applyHashSelection() {
      var m = (location.hash || '').match(/^#L(\d+)(?:-L(\d+))?$/);
      if (!m) return;
      var a = parseInt(m[1], 10);
      var b = m[2] ? parseInt(m[2], 10) : a;
      updateSelection(a, b);
      startIndex = a;
      var firstEl = lnEl.querySelectorAll(':scope > .line-number')[a - 1];
      if (firstEl) { var pre = grid.querySelector('pre'); if (pre) pre.scrollTop = firstEl.offsetTop - 60; }
    }
    applyHashSelection();
    window.addEventListener('hashchange', applyHashSelection);
  });
}

const vueApp = new Vue({
  el: '#vueAppFuckSafari',
  data: {
    roughData: {
      info: <%- serializejs(info) %>,
      result: <%- serializejs(roughResult) %>,
      running: false,
      displayConfig: displayConfig
    },
    codeKey: 0,
    code: <%- serializejs(preferFormattedCode && formattedCode !== null) -%> ? formattedCode : unformattedCode,
    currentFormatted: <%- serializejs(preferFormattedCode && formattedCode !== null) -%>,
    detailResult: <%- serializejs(detailResult) %>,
    displayConfig: displayConfig,
  },
  computed: {
    singleSubtask() {
      return this.detailResult.judge.subtasks.length === 1;
    },
    showRejudge() {
      return this.displayConfig.showRejudge && (!this.roughData.running);
    }
  },
  methods: {
    getStatusString(statusCode) {
      return statusToString[statusCode];
    },
    firstNonAC(t) {
      if (t.every(function(v){ return v === TestcaseResultType.Accepted;})) {
        return TestcaseResultType.Accepted;
      } else {
        return t.find(function(r) { return r !== TestcaseResultType.Accepted;});
      }
    },
    getSubtaskResult(t) {
      if (t.cases.some(function(c){ return c.status === TaskStatus.Running;})) {
        return "Running";
      } else if (t.cases.some(function(c) { return c.status === TaskStatus.Waiting;})) {
        return "Waiting";
      } else if (t.cases.every(function(c){ return c.status === TaskStatus.Done || c.status === TaskStatus.Skipped;})) {
        return this.getStatusString(this.firstNonAC(t.cases.filter(function(c) { return c.result; })
          .map(function(c) { return c.result.type;})));
      } else {
        return "System Error";
      }
    },
    getTestcaseStatus(c) {
      if (c.status === TaskStatus.Done) {
        return this.getStatusString(c.result.type);
      } else if (c.status === TaskStatus.Waiting) {
        return "Waiting";
      } else if (c.status === TaskStatus.Running) {
        return "Running";
      } else if (c.status === TaskStatus.Skipped) {
        return "Skipped";
      } else {
        return "System Error";
      }
    },
    checkTestcaseOK(c) {
      return c.status === TaskStatus.Done;
    },
    getProgress(index) {
      if (!this.detailResult || !this.detailResult.judge || !this.detailResult.judge.subtasks) return {
        finished: 0,
        total: 0
      };

      var isPending = status => [TaskStatus.Waiting, TaskStatus.Running].includes(status);
      var subtaskProgress = [], allFinished = 0, allTotal = 0;
      for (var i in this.detailResult.judge.subtasks) {
        var subtaskFinished = 0, subtaskTotal = 0;
        for (var j in this.detailResult.judge.subtasks[i].cases) {
          subtaskTotal++, allTotal++;
          if (!isPending(this.detailResult.judge.subtasks[i].cases[j].status)) subtaskFinished++, allFinished++;
        }

        subtaskProgress.push({
          finished: subtaskFinished,
          total: subtaskTotal
        });
      }

      var allProgress = {
        finished: allFinished,
        total: allTotal
      };

      return typeof index === 'undefined' ? allProgress : subtaskProgress[index];
    },
    toggleFormattedCode() {
      this.currentFormatted = !this.currentFormatted;
      this.code = this.currentFormatted ? formattedCode : unformattedCode;
      this.codeKey += 1; // 更新 key，强制组件重新渲染
      // 同步 URL 中的 formatted 参数
      try {
        var params = new URLSearchParams(location.search);
        params.set('formatted', this.currentFormatted ? '1' : '0');
        var newUrl = location.pathname + '?' + params.toString() + location.hash;
        history.replaceState(null, '', newUrl);
      } catch (e) { /* noop */ }
    }
  },
  created() {
    // 读取 URL 查询参数中的 formatted，覆盖默认显示设置
    try {
      var params = new URLSearchParams(location.search);
      if (params.has('formatted')) {
        var v = params.get('formatted');
        var desired = (v === '1' || v === 'true');
        if (formattedCode !== null && desired !== this.currentFormatted) {
          this.currentFormatted = desired;
          this.code = desired ? formattedCode : unformattedCode;
          this.codeKey += 1;
        }
      }
    } catch (e) { /* noop */ }
  },
  mounted() {
    $(document).ready(function(){ $('.ui.accordion').accordion({ selector: { trigger: '.title:not(.unexpandable)' } })});
    applyLineNumbers();
  },
  updated() {
    $('.ui.accordion').off().accordion({ selector: { trigger: '.title:not(.unexpandable)' } });
    applyLineNumbers();
  }
});
if (token != null) {
  const loadSocketIO = function () {
    let currentVersion = 0;
    const socket = io(socketUrl);
    socket.on('connect', function () {
      socket.on('start', function () {
        vueApp.roughData.running = true;
        console.log("Judge start!");
        vueApp.detailResult = {};
      });
      socket.on('update', function (p) {
        console.log("Delta: ", p);
        if (p.from === currentVersion) {
          currentVersion = p.to;
          jsondiffpatch.patch(vueApp.detailResult, p.delta);
          vueApp.detailResult = JSON.parse(JSON.stringify(vueApp.detailResult));// WTF?
          vueApp.roughData.result = p.roughResult;
        } else { // Some packets are dropped. Let's reset.
          socket.close();
          setTimeout(loadSocketIO, 0);
        }
      });
      socket.on('finish', function (p) {
        console.log("Judge finished");
        vueApp.roughData.running = false;
        vueApp.roughData.result = p.roughResult;
        vueApp.detailResult = p.result;
        socket.close();
      });
      socket.emit('join', token, function (data) {
        console.log("join! ", data);
        if (data && data.ok) {
          if (data.finished) {
            vueApp.roughData.result = data.roughResult;
            if (!data.result) location.reload(true);
            vueApp.detailResult = data.result;
            socket.close();
          } else {
            if (data.running) {
              // vueApp.roughData.running = true;
              vueApp.detailResult = data.current.content;
              // vueApp.roughData.result = data.roughResult;
              currentVersion = data.current.version;
            }
          }
        } else {
          alert("ERROR: " + JSON.stringify(data));
        }
      });
    });
  };
  loadSocketIO();
}
</script>
<script>
  document.addEventListener('keydown', function (event) {
    if ((event.ctrlKey || event.metaKey) && event.key === 'a') {
      var sel = window.getSelection();
      var rg = document.createRange()
      rg.selectNodeContents(document.querySelector('code'));
      sel.removeAllRanges();
      sel.addRange(rg);
      event.preventDefault();
    }
  });
</script>
</span>
<% include footer %>
